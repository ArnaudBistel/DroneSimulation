package agents

import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import io.sarl.core.ParticipantJoined
import io.sarl.core.ParticipantLeft
import io.sarl.core.SpaceCreated
import io.sarl.core.SpaceDestroyed
import gui.DroneBody
import gui.WarehouseBody
import io.sarl.core.Lifecycle
import io.sarl.core.Schedules
import io.sarl.core.DefaultContextInteractions
import io.sarl.javafx.AppExit
import java.util.List
import map.MapPoint
import org.arakhne.afc.math.geometry.d2.i.Point2i
import gui.PathEnum
import map.MapPointType

/** 
 * @author arnaud
 * 
 */
agent Drone {
	uses Logging, Lifecycle, Schedules, DefaultContextInteractions

	var body : DroneBody
	var warehouseBody : WarehouseBody
	var path : List<MapPoint>
	var nextDestination : Point2i = null
	var arrivedToNextDestination : Boolean = true
	
	on Initialize {
		synchronized (this) {
		
			// Event trigger before the agent begin to live or to be used.
			// You should put all the initialization statements in this block of code.
			// info("The agent Drone was started : " + this.getID)
			this.body = occurrence.parameters.get(0) as DroneBody
			this.warehouseBody = occurrence.parameters.get(1) as WarehouseBody
			emit(new AgentInitialized(AgentType.DRONE))
		}	
	}
	
	on DronePerception {
		synchronized (this) {
			if (this.nextDestination !== null) {
				// Checking if we arrive to next destination
				if (this.body.position.x == this.nextDestination.getX() &&
					this.body.position.y == this.nextDestination.getY()
				) {
					this.nextDestination = null
					this.arrivedToNextDestination = true
					if(this.path.size > 0){
						var action = new Action(ActionType.DEPOSIT, #[this.body.position.x as Integer, this.body.position.y as Integer])
						var actionEvent = new ActionEvent(action)
						emit(actionEvent)	
					}
					calcNextDestinationVelocity()
				} else {
					var bodies = occurrence.perceived
					
					var x = this.body.posX + this.body.velocityX
					var y = this.body.posY + this.body.velocityY

					var distX = this.nextDestination.getX() - this.body.position.x
					var distY = this.nextDestination.getY() - this.body.position.y

					if (Math.abs(distX) <= 3 && Math.abs(distY) <= 3) {
						x = this.nextDestination.getX()
						y = this.nextDestination.getY()
					}


					this.body.setPosX(x)
					this.body.setPosY(y)

					var action = new Action(ActionType.MOVE, #[x as Integer, y as Integer, this.ID])
					var actionEvent = new ActionEvent(action)
					emit(actionEvent)
				}
			}
			
		}
	}
	
	on DronePathAssignment {
		synchronized (this) {
			this.body.setImage(PathEnum.DRONE_LOADED.getPath)
			this.path = occurrence.path
			// Deleting the initial warehouse
			this.path.remove(0)
			this.arrivedToNextDestination = true
			calcNextDestinationVelocity()
		}
	}
	
	def calcNextDestinationVelocity() {
		if (this.path.size() > 0) {
			if (this.path.size() == 1) {
				this.body.setImage(PathEnum.DRONE_EMPTY.getPath)
			}
			if (this.arrivedToNextDestination) {
				this.nextDestination = this.path.remove(0).position
				this.arrivedToNextDestination = false
			}
			var distX = this.nextDestination.getX() - this.body.position.x
			var distY = this.nextDestination.getY() - this.body.position.y
			var totalDist = Math.sqrt(Math.pow(distX, 2) + Math.pow(distY, 2))
			var totalVelocity = 3.0;
			this.body.velocityX = totalVelocity * distX / totalDist;
			this.body.velocityY = totalVelocity * distY / totalDist;
			/*if (Math.abs(distX) >= Math.abs(distY)){
				var vX = 3
				if (distX < 0) vX = -3
				this.body.velocityX = vX
				this.body.velocityY = (vX * distY) / distX
			} else {
				var vY = 3
				if(distY < 0) vY = -3
				this.body.velocityY = vY
				this.body.velocityX = (vY * distX) / distY
			}*/
		} else { // back to warehouse
			var action = new Action(ActionType.BACK_TO_WAREHOUSE, #[this.body])
			var actionEvent = new ActionEvent(action)
			emit(actionEvent)
		}
	}

	on AppExit {
		//info("The agent Drone is stopping.")
		killMe
	}

	on Restart {
		killMe
	}

	on Destroy {
		//info("Drone destroy")
		// killMe
	}

	on AgentSpawned {
		// A new agent has been spawned in our context.
	}

	on AgentKilled {
		// A new agent has been killed in our context.
	}

	on ContextJoined {
		// Event trigger when an agent of the level joins a shared context.
		// Sent to a agent of the same level.
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a agent of the same level.
	}

	on MemberJoined {
		// Event trigger when an agent joins one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on SpaceCreated {
		// Event trigger when a space is created into one of the contexts where the agent is.
	}

	on SpaceDestroyed {
		// Event trigger when a space is destroyed from one of the contexts where the agent is.
	}

	on ParticipantJoined {
		// Event trigger when a participant has joined a space.
	}

	on ParticipantLeft {
		// Event trigger when a participant has left a space.
	}
}
