package agents

import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import map.SimulationMap
import io.sarl.core.Initialize
import controller.MainWindowController
import gui.DroneBody
import java.util.UUID
import io.sarl.core.Destroy
import org.arakhne.afc.math.geometry.d2.i.Point2i
import solutionSolver.simulatedAnnealing.SimulatedAnnealing

/** 
 * @author arnaud
 * 
 */
agent AppManager {
	uses Logging, Lifecycle, DefaultContextInteractions

	var map : SimulationMap

	on Initialize {
		loggingName = "AppManager"
		info("AppManager created!")
		var controller = occurrence.parameters.get(0) as MainWindowController
		var droneBody = new DroneBody(200, 200, UUID::randomUUID)
		controller.addBody(droneBody)
		spawnInContext(1, Drone, defaultContext, droneBody)
		var t  : Point2i = new Point2i(0, 0)
		
		map = new SimulationMap(10,1) //10 Clients + 1 Warehouse
		
		/* Testing droneEnergyCost function : Should print drone's max battery (1628)
		var simulatedAnnealing = new SimulatedAnnealing(map)
		info(simulatedAnnealing.droneEnergyCost(0, 110))
		info(simulatedAnnealing.droneEnergyCost(1, 95))
		info(simulatedAnnealing.droneEnergyCost(2, 90))
		info(simulatedAnnealing.droneEnergyCost(3, 85))
		info(simulatedAnnealing.droneEnergyCost(4, 80))
		info(simulatedAnnealing.droneEnergyCost(5, 75))*/
	}

	on Destroy {
	}
	
	def initMap(){
		
	}
}




