package agents

import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import map.SimulationMap
import io.sarl.core.Initialize
import controller.MainWindowController
import gui.DroneBody
import java.util.UUID
import io.sarl.core.Destroy
import org.arakhne.afc.math.geometry.d2.i.Point2i
import solutionSolver.FakeSimulationMap
import solutionSolver.simulatedAnnealing.SimulatedAnnealing
import solutionSolver.SolutionSolver
import java.util.ArrayList
import java.util.List
import map.MapPoint
import map.MapPointType
import java.util.Arrays
import java.text.DecimalFormat

/** 
 * @author arnaud
 * 
 */
agent AppManager {
	uses Logging, Lifecycle, DefaultContextInteractions

	var map : FakeSimulationMap

	on Initialize {
		loggingName = "AppManager"
		info("AppManager created!")
		var controller = occurrence.parameters.get(0) as MainWindowController
		var droneBody = new DroneBody(200, 200, UUID::randomUUID)
		controller.addBody(droneBody)
		spawnInContext(1, Drone, defaultContext, droneBody)
		var t  : Point2i = new Point2i(0, 0)
		
		map = new FakeSimulationMap(100,1,50,50); //10 Clients + 1 Warehouse
		
		
		var startTime = System.nanoTime();
		var sim = new SimulatedAnnealing(map);
		var df = new DecimalFormat("0.00")
		var initCost = SolutionSolver.solutionCost(sim.convertListToListOfList(sim.initialSolution))
		info("initial cost : " + df.format(initCost));
		//sim.printSolution(sim.initialSolution)
		var solution = sim.Solve(500,0.05,0.9999,10)
		//sim.printSolution2d(solution)
		var finalCost = SolutionSolver.solutionCost(solution) 
		info("final cost : " + df.format(finalCost));
		info("improve : " + df.format((initCost - finalCost)))
		
		var clts = new ArrayList<MapPoint>(map.clients);
		for(e : solution)
			clts.removeAll(e);
		info("clients ignored : " + clts.size)
		var stopTime = System.nanoTime();
		info("exec (ms) : " + ((stopTime - startTime) / 1000000))
	}

	on Destroy {
	}
	
	def initMap(){
		
	}
}




