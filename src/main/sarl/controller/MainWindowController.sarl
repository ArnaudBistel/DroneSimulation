package controller

import agents.AppManager
import agents.ExportDataEvent
import agents.ImportDataEvent
import agents.Restart

import gui.Body
import gui.Client
import gui.DroneBody
import gui.MainApp
import gui.WarehouseBody

import io.sarl.javafx.FxViewerController

import java.util.ArrayList
import java.util.List
import java.util.Map
import java.util.TreeMap
import java.util.UUID
import java.util.concurrent.atomic.AtomicBoolean

import javafx.animation.AnimationTimer
import javafx.application.Platform
import javafx.beans.value.ChangeListener
import javafx.beans.value.ObservableValue
import javafx.fxml.FXML
import javafx.css.PseudoClass

import javafx.scene.canvas.Canvas
import javafx.scene.image.ImageView
import javafx.scene.control.Button
import javafx.scene.control.Label
import javafx.scene.control.RadioButton
import javafx.scene.control.TextField
import javafx.scene.control.Toggle
import javafx.scene.control.ToggleGroup
import javafx.scene.layout.Pane
import javafx.scene.layout.AnchorPane

import javafx.^event.ActionEvent
import agents.CancelEvery
import agents.GenerateGraph

class MainWindowController extends FxViewerController {
	var bodies : Map<UUID, Body> = new TreeMap<UUID, Body>
	var droneBodies : Map<UUID, DroneBody> = new TreeMap<UUID, DroneBody>
	var warehouseBodies : Map<UUID, WarehouseBody> = new TreeMap<UUID, WarehouseBody>
	var clients : List<Client> = new ArrayList<Client>()
	var managerId : UUID = null
	var appManager : AppManager = null
	var resultsController : ResultsController
	var mainApp : MainApp;
	@FXML
	var startButton : Button
	@FXML
	var generateButton : Button
	@FXML
	var restartButton : Button
	val started = new AtomicBoolean
	var startedBool = false
	
	var width : Integer
	var height : Integer
	
	@FXML
	var drawZone : Canvas

	@FXML
	var rootPane : AnchorPane
	
	@FXML
	var drawPane : Pane
	
	@FXML
	var simulationRadioButtonGroup : ToggleGroup = new ToggleGroup
	@FXML
	var multiTestsRadioButton : RadioButton
	@FXML
	var nbDronesTextField : TextField
	@FXML
	var nbEntrepotsTextField : TextField
	@FXML
	var nbClientsTextField : TextField
	@FXML
	var poidsColisTextField : TextField
	@FXML
	var speedTextField : TextField

	@FXML
	var aiRadioButtonGroup : ToggleGroup = new ToggleGroup
	@FXML
	var paramTextField1 : TextField
	@FXML
	var paramTextField2 : TextField
	@FXML
	var paramTextField3 : TextField

	@FXML
	var speedLabel : Label
	@FXML
	var paramLabel1 : Label
	@FXML
	var paramLabel2 : Label
	@FXML
	var paramLabel3 : Label
	
	var simulation : Boolean = true
	var recuit : Boolean = true
	var parameters : ArrayList = new ArrayList()
	
	var inMultiTest = false
	var stopped = true
	
	@Pure
	def setMainApp(mainApp : MainApp ) {
		this.mainApp = mainApp;
		this.width = drawZone.width as Integer;
		this.height = drawZone.height as Integer;
		//System.out.println("Width : " + this.width + " -- height : " + this.height)
		
		initializeParamFields
		createParametersList
		
		// radio button simulation ou multiple tests listener
		this.simulationRadioButtonGroup.selectedToggleProperty().addListener(new ChangeListener<Toggle>() 
        {
			def changed(ob : ObservableValue<? extends Toggle>, o : Toggle, n:  Toggle)
            {
                var rb = simulationRadioButtonGroup.getSelectedToggle() as RadioButton
  
                if (rb != null) {
                    var s = rb.getText();
                    if (s.equals("Simulation")){
                    	simulation = true
                    }else{
                    	simulation = false
                    }
					updateTextFields()                 
				}
            }
        });

		// radiobutton recuit simulé ou q-learning
		this.aiRadioButtonGroup.selectedToggleProperty().addListener(new ChangeListener<Toggle>() {
			def changed(ob : ObservableValue<? extends Toggle>, o : Toggle, n : Toggle) {
				var rb = aiRadioButtonGroup.getSelectedToggle() as RadioButton
				if (rb != null) {
					var s = rb.getText();
					if (s.equals("Recuit simulé")) {
						recuit = true
                    } else {
						recuit = false
					}
					updateAIParamLabel
					updateTextFields()
				}
			}
		});
	}
	
	
	def initializeParamFields {
		// Allow only integers
		var fields = new ArrayList<TextField>
		fields.addAll(nbDronesTextField, nbEntrepotsTextField, nbClientsTextField)
		for (field : fields) {
			Platform.runLater(new Runnable() {
				@Override
				def run() {
					var listener = new ChangeListener<String> {
						
						var ignore : boolean
						
						def changed(observable : ObservableValue<? extends String>, oldValue : String,
							newValue : String) {
							if(ignore || newValue === null){
								return
							}
							
							if (newValue.matches("\\d*")) {
								field.text = newValue
							} else {
								ignore = true
								field.text = oldValue
								ignore = false
							}
						}

					}

					field.textProperty.addListener(listener)
				}
			})			
		}
		// Allow floats
		fields.clear
		fields.addAll(speedTextField, paramTextField1, paramTextField2, paramTextField3)
		for (field : fields) {
			Platform.runLater(new Runnable() {
				@Override
				def run() {
					var listener = new ChangeListener<String> {

						var ignore : boolean

						def changed(observable : ObservableValue<? extends String>, oldValue : String,
							newValue : String) {
							if (ignore || newValue === null) {
								return
							}

							if (newValue.matches("[0-9]+([.][0-9]*)?") ||
								newValue.matches("[0-9]*")) {
								field.text = newValue
							} else {
								ignore = true
								field.text = oldValue
								ignore = false
							}
						}

					}

					field.textProperty.addListener(listener)
				}
			})
		}
		//Allow range of floats
		fields.clear
		fields.addAll(poidsColisTextField)
		for (field : fields) {
			Platform.runLater(new Runnable() {
				@Override
				def run() {
					var listener = new ChangeListener<String> {

						var ignore : boolean

						def changed(observable : ObservableValue<? extends String>, oldValue : String,
							newValue : String) {
							if (ignore || newValue === null) {
								return
							}

							if (newValue.matches("[0-9]+([.][0-9]*)?(-[0-9]*([.][0-9]*)?)?") ||
								newValue.matches("[0-9]*")) {
								field.text = newValue
							} else {
								ignore = true
								field.text = oldValue
								ignore = false
							}
						}

					}

					field.textProperty.addListener(listener)
				}
			})
		}
		//Allow for range of integers
		/*fields.clear
		fields.addAll(poidsColisTextField)
		for (field : fields) {
			Platform.runLater(new Runnable() {
				@Override
				def run() {
					var listener = new ChangeListener<String> {

						var ignore : boolean

						def changed(observable : ObservableValue<? extends String>, oldValue : String,
							newValue : String) {
							if (ignore || newValue === null){
								return
							}

							if (newValue.matches("[0-9]+-?[0-9]*") || newValue.matches("[0-9]*")) {
								field.text = newValue
							} else {
								ignore = true
								field.text = oldValue
								ignore = false
							}
						}

					}

					field.textProperty.addListener(listener)
				}
			})
		}*/
	}

	def updateTextFields() {
	 	if (simulation) {		
			nbDronesTextField.setPromptText("ex: 5, 10...")
			nbEntrepotsTextField.setPromptText("ex: 1, 3...")
			nbClientsTextField.setPromptText("ex: 10, 30...")
			poidsColisTextField.setPromptText("ex: 1-5, 5...")
			speedTextField.setVisible(true)
			speedLabel.setVisible(true)
		} else {
			nbDronesTextField.setPromptText("ex: 5, 2-10...")
			nbEntrepotsTextField.setPromptText("ex: 1, 1-3...")
			nbClientsTextField.setPromptText("ex: 10, 10-30...")
			poidsColisTextField.setPromptText("ex: 5, 0.5-5...")
			speedTextField.setVisible(false)
			speedLabel.setVisible(false)
		}
		
		if (recuit) {
			// température initiale
			paramTextField1.setPromptText("ex: 600, 0.1-500..")
			// alpha
			paramTextField2.setPromptText("ex: 0, 0.9...")
			// nombre itérations par pallier
			paramTextField3.setPromptText("ex: 10, 2...")

		} else {
			// alpha
			paramTextField1.setPromptText("ex: 0.1, 1...")
			// gamma
			paramTextField2.setPromptText("ex: 0.9, 0...")
			// epsilon
			paramTextField3.setPromptText("ex: 0.1, 1...")
		}
	}
	
	def updateAIParamLabel() {
		if (recuit) {
			paramLabel1.setText("T° initiale/range")
			paramLabel2.setText("Alpha")
			paramLabel3.setText("Itér. par pallier")
		} else {
			paramLabel1.setText("Alpha")
			paramLabel2.setText("Gamma")
			paramLabel3.setText("Epsilon")			
		}
	}

	/* 
	 * def initialize {
	 * 
	 * if (!started.getAndSet(true)) {			
			startAgentApplication(typeof(HelloAgent)) [
	 * //
			]
		}
	 * }
	 */
	 
	 
	@FXML
	def generateGraph {
		createParametersList
		this.inMultiTest = false
		
		
		if (!this.simulation) {
			if (this.managerId === null) {
				mainApp.showStatistics()
				createManager
			}
			else{
				if(this.started.get()){
					startAgent
					mainApp.showStatistics()
					this.resultsController.generateGraph
					
				}
				else {
					mainApp.showStatistics()
					this.resultsController.generateGraph
				}	
			}
		}
		else {
			if (this.managerId === null) {
				createManager
			}
			else{
				this.bodies.clear
				this.droneBodies.clear
				this.warehouseBodies.clear
				this.clients.clear
				this.drawPane.children.clear
	
				val gc = drawZone.graphicsContext2D
				gc.clearRect(0, 0, drawZone.width, drawZone.height)
				emitGenerateGraph
			}
		}
	}
	
	def emitGenerateGraph(param : ArrayList = this.parameters){
		emitToAgents(new GenerateGraph(param), true)
	}
	 
	 def createManager() {
		if (this.managerId === null) {
			System.out.println("create app manager")
			var id = UUID::randomUUID
			startAgentApplication(typeof(AppManager), id)[]
			managerId = id
		}
	}
	 
	@FXML
	def startAgent {
		createParametersList()
		this.inMultiTest = false
		// start
		if (!started.getAndSet(true)) {
			// lance la simulation
			if (this.simulation) {
				this.restartButton.setVisible(true)
				this.stopped = false
				this.startButton.setText("Arrêter");
				this.startButton.getStyleClass().add("button-stop");
				this.startButton.getStyleClass().remove("button-start");
				
				if (this.managerId === null){
					createManager()
				}
				else {
					System.out.println("Restart app manager")
					emitToAgents(new Restart, true)
				}

				this.startSimulation();
			
			} // multi-test
			else {
				mainApp.showStatistics();
				this.stopped = true
				started.set(false)
				if (this.managerId === null) {
					createManager()
				}
				
				
			}	

		// stop
		} else if (started.getAndSet(false)) {
			this.restartButton.setVisible(false)
			this.stopped = true
			this.bodies.clear
			this.droneBodies.clear
			this.warehouseBodies.clear
			this.clients.clear
			this.drawPane.children.clear

			emitToAgents(new CancelEvery, true)
			
			this.startButton.getStyleClass().add("button-start");
			this.startButton.getStyleClass().remove("button-stop");
			this.startButton.setText("Démarrer");
		}
	}
	
	@FXML
	def restartSimulation {
		// Stop
		this.bodies.clear
		this.droneBodies.clear
		this.warehouseBodies.clear
		this.clients.clear
		this.drawPane.children.clear
		emitToAgents(new CancelEvery, true)
		// Restart
		createParametersList()
		// start
				
		if (this.managerId === null){
			createManager()
		}
		else {
			System.out.println("Restart app manager")
			emitToAgents(new Restart, true)
		}

		this.startSimulation();
	}

	def createParametersList {
		this.parameters.clear
		this.parameters.add(this.inMultiTest == true ? false : simulation)
		this.parameters.add(recuit)
		this.parameters.add(createRange(getNbDronesInput))
		this.parameters.add(createRange(getNbEntrepotsInput))
		this.parameters.add(createRange(getNbClientsInput))
		this.parameters.add(createRange(getPoidsColisInput))
		if (recuit) {
			this.parameters.add(createRange(getParam1Input))
		} else {
			this.parameters.add(getParam1Input)
		}
		this.parameters.add(getParam2Input)
		this.parameters.add(getParam3Input)

		/* for (var j = 0; j < this.parameters.size; j++) {
		 * System.out.println("this.parameters["+j+"] : " + this.parameters.get(j))
		 * }
		 */
		this.parameters.add(createRange(getSpeedInput))
	}
	
	
	def createRange(st : String) : List<Float> {
		var ret : List<Float> = new ArrayList()
		if (st.contains('-')) {
    		var nb = ""
	        for (var i = 0; i < st.length; i++) {
	        	if (Character.compare(st.charAt(i) as char, '-') != 0) {
	        		nb += st.charAt(i)          		      		
	        	} else {
	        		if (0 >= nb as float) {
	        			ret.add(1f)
	        		} else {
		        		ret.add(checkNumbers(nb) as float)	        			
	        		}
	        		nb = ""    		
	        	}
        		if (i == st.length - 1) {
        			if (ret.get(0) > checkNumbers(nb) as float) {
		        		ret.add(ret.get(0) + 1)        			
        			} else {
		        		ret.add(checkNumbers(nb) as float)      				
        			}
        		}
        	}
		} else {
			ret.add(checkNumbers(st) as float)
		}
		return ret
	}

	def addClient(client : Client) {
		this.clients.add(client)
	}

	def addBody(body : Body, type : String) {
		this.bodies.put(body.getId, body)
		
		if (type.equals("DRONE")){
			this.droneBodies.put(body.getId, body as DroneBody)
		} else if (type.equals("WAREHOUSE")) {
			this.warehouseBodies.put(body.getId, body as WarehouseBody)
		}
	}

	def startSimulation() {

	       	var timer = new AnimationTimer() {
            @Override
            def handle(now : long) {
				var lastUpdate = 0l;
				if (now - lastUpdate >= 28_000_000) {
					update();
					lastUpdate = now;
				}
			}
        };
        timer.start();
	}
	
	def initalizeImageView() {
		for (b : this.bodies.values()) {
			Platform.runLater(new Runnable() {
	            @Override 
	            def run() {
					b.imageView.setImage(b.image)
					b.imageView.setX(b.position.x)
					b.imageView.setY(b.position.y)
					drawPane.children.add(b.imageView)
	            }
        	})
		}

		val gc = drawZone.graphicsContext2D
	 
		for (c : this.clients) {
			c.drawItself(gc);

		}
	}
	
	def update() {
		for (c : drawPane.children) {
			var body = this.bodies.get(UUID.fromString(c.id))
			var imageView = c as ImageView
			imageView.setImage(body.image)
			imageView.setX(body.position.x)
			imageView.setY(body.position.y)
			//System.out.println("X : " + test.position.x + " -- Y : " + test.position.y)
			//System.out.println(test)
		} 
		val gc = drawZone.graphicsContext2D
		gc.clearRect(0, 0, drawZone.width, drawZone.height)
		for (c : this.clients) {
			c.drawItself(gc);

		}
	}

	def getHeight() {
		return this.height;
	}

	def getWidth() {
		return this.width;
	}
	
	def getClients() : List<Client>{
		return this.clients;
	}

	def getNbDronesInput() : String {
		return this.nbDronesTextField.text
	}

	def getNbEntrepotsInput() : String {
		return this.nbEntrepotsTextField.text
	}
	
	def getNbClientsInput() : String {
		return this.nbClientsTextField.text
	}

	def getPoidsColisInput() : String {
		return this.poidsColisTextField.text
	}

	def getSpeedInput() : String {
		return this.speedTextField.text
	}

	def getParam1Input() : String {
		return this.paramTextField1.text
	}
	
	/* 
	def getParam1Input() : float {
		var ret = checkNumbers(this.paramTextField1.text) as float
		if (recuit) {
		} else {
			
		}
		return ret
	 * }
	 */
	
	def getParam2Input() : float {
		var ret = checkNumbers(this.paramTextField2.text) as float
		if (recuit){
			if (ret>=1){
				ret = 0.9f
			}
		} else {
			
		}
		return ret
	}
	
	def getParam3Input() : float {
		var ret = checkNumbers(this.paramTextField3.text) as float
		if (recuit) {
			if (ret < 1){
				ret = 1
			}
		} else {
			
		}
		return ret
	}
	
	def checkNumbers(text : String) : float {
		var ret : float
		try {
			ret = Float.parseFloat(text);
			if (ret < 0){
				ret = 0.9f
			}
		} catch (ex : NumberFormatException) {
			ret = 1
		} 
		return ret
	}
	
	def getStarted() : Boolean {
		return this.started.get()
	}
	
	def getParameters() : ArrayList {
		return this.parameters
	}
	
	def getMultiTestsRadioButton () : RadioButton {
		return this.multiTestsRadioButton;
	}

	def getSimulation() : Boolean {
		return this.simulation
	}
	
	def setAppManager(manager : AppManager){
		this.appManager = manager
	}
	
	def getAppManager(){
		return this.appManager
	}
	
	def getStopped{
		return this.stopped
	}

	def getWarehouseBodies {
		return this.warehouseBodies
	}

	def setResultsController(resultsController : ResultsController) {
		synchronized (this) {
			this.resultsController = resultsController
		}
	}

	def getResultsController() : ResultsController {
		return this.resultsController
	}	

	def exportData(filename : String) {
		System.out.println("Send filename : " + filename)
		emitToAgents(new ExportDataEvent(filename), true)
	}

	def importData(filename : String) {
		emitToAgents(new ImportDataEvent(filename), true)
	}
	
	def simulateStop() {
		Platform.runLater(new Runnable() {
			@Override
			def run() {
				startAgent
			}
		})
	}
	
	def getManagerId() : UUID {
		return this.managerId
	}
	
	def getInMultiTest{
		return this.inMultiTest
	}
	
	def setInMultiTest (inMultiTest : boolean){
		this.inMultiTest = inMultiTest
	}
}
