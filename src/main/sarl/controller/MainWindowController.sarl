package controller

import agents.AppManager
import agents.ExportDataEvent
import agents.ImportDataEvent
import agents.Restart

import gui.Body
import gui.Client
import gui.DroneBody
import gui.MainApp
import gui.WarehouseBody

import io.sarl.javafx.FxViewerController

import java.util.ArrayList
import java.util.List
import java.util.Map
import java.util.TreeMap
import java.util.UUID
import java.util.concurrent.atomic.AtomicBoolean


import javafx.animation.AnimationTimer
import javafx.application.Platform
import javafx.beans.value.ChangeListener
import javafx.beans.value.ObservableValue
import javafx.fxml.FXML
import javafx.css.PseudoClass

import javafx.scene.canvas.Canvas
import javafx.scene.image.ImageView
import javafx.scene.image.Image
import javafx.scene.shape.Circle
import javafx.scene.control.Button
import javafx.scene.control.Label
import javafx.scene.control.RadioButton
import javafx.scene.control.TextField
import javafx.scene.control.Toggle
import javafx.scene.control.ToggleGroup
import javafx.scene.layout.Pane
import javafx.scene.layout.AnchorPane
import javafx.^event.EventHandler
import javafx.scene.input.MouseEvent
import javafx.scene.paint.RadialGradient
import javafx.scene.paint.Stop;
import javafx.scene.paint.Color;
import javafx.scene.paint.CycleMethod;



import agents.CancelEvery
import agents.GenerateGraph

import agents.Pause
import agents.GetMapInfos
import solutionSolver.SolutionSolver
import java.util.Date
import java.util.Timer
import java.util.TimerTask
import java.text.SimpleDateFormat
import java.time.format.DateTimeFormatter
import java.util.concurrent.TimeUnit
import timer.SimTimer
import timer.Task
import utils.variables.SimulationParameters
import java.util.Arrays
import agents.InitializeResultGraph
import javafx.scene.effect.DropShadow
import javafx.scene.layout.GridPane

class MainWindowController extends FxViewerController {
	var bodies : Map<UUID, Body> = new TreeMap<UUID, Body>
	var droneBodies : TreeMap<UUID, DroneBody> = new TreeMap<UUID, DroneBody>
	var warehouseBodies : TreeMap<UUID, WarehouseBody> = new TreeMap<UUID, WarehouseBody>
	var clients : List<Client> = new ArrayList<Client>()
	var managerId : UUID = null
	var appManager : AppManager = null
	var managerInitialized = false
	var resultsController : ResultsController
	var mainApp : MainApp;



	@FXML
	var startButton : Button
	@FXML
	var playButtonImageView : ImageView
	@FXML
	var stopButton : Button
	@FXML
	var generateButton : Button
	@FXML
	var restartButton : Button
	@FXML
	var pauseButton : Button
	val started = new AtomicBoolean
	var startedBool = false

	var width : Integer
	var height : Integer

	@FXML
	var drawZone : Canvas

	@FXML
	var droneBatteryCircle : Circle
	@FXML
	var rootPane : AnchorPane

	@FXML
	var drawPane : Pane

	@FXML
	var simulationRadioButtonGroup : ToggleGroup = new ToggleGroup
	@FXML
	var multiTestsRadioButton : RadioButton
	@FXML
	var nbDronesTextField : TextField
	@FXML
	var nbEntrepotsTextField : TextField
	@FXML
	var nbClientsTextField : TextField
	@FXML
	var poidsColisTextField : TextField
	@FXML
	var speedTextField : TextField

	@FXML
	var aiRadioButtonGroup : ToggleGroup = new ToggleGroup
	@FXML
	var paramTextField1 : TextField
	@FXML
	var paramTextField2 : TextField
	@FXML
	var paramTextField3 : TextField

	@FXML
	var speedLabel : Label
	@FXML
	var paramLabel1 : Label
	@FXML
	var paramLabel2 : Label
	@FXML
	var paramLabel3 : Label



	// Right-pane variables
	@FXML
	var droneRP : Label
	@FXML
	var entrepotsRP : Label
	@FXML
	var averagePackage : Label
	@FXML
	var remainingPackages : Label
	@FXML
	var deliveredPackages : Label

	@FXML
	var selectedDronePane : GridPane

	@FXML
	var selectedWarehousePane : GridPane

	@FXML
	var unselectedPane : Pane

	@FXML
	var deliveredDronePackagesLabel : Label
	@FXML
	var timeElapsedLabel : Label

	var timeElapsed : long

	var timer : Timer
	var myTask : TimerTask

	var timeRatio : float

	@FXML
	var droneIndex : Label
	@FXML
	var packageWeight : Label
	@FXML
	var battery : Label

	@FXML
	var nextDestinationTypeLabel : Label

	@FXML
	var nextPositionLabel : Label

	@FXML
	var warehouseIndex : Label
	@FXML
	var dronesAtWarehouse : Label
	@FXML
	var dronesPerWarehouse : Label

	var speedRatio : float

	var selectedDrone : DroneBody
	var selectedWarehouse : WarehouseBody

	var simulation : Boolean = true
	var recuit : Boolean = true
	var parameters : ArrayList = new ArrayList()

	var inMultiTest = false
	var stopped = true
	var pause = true
	var dropShadow : DropShadow
	@Pure
	def setMainApp(mainApp : MainApp ) {
		this.mainApp = mainApp;
		this.width = drawZone.width as Integer;
		this.height = drawZone.height as Integer;
		//System.out.println("Width : " + this.width + " -- height : " + this.height)

		initializeParamFields
		createParametersList

		// radio button simulation ou multiple tests listener
		this.simulationRadioButtonGroup.selectedToggleProperty().addListener(new ChangeListener<Toggle>()
        {
			def changed(ob : ObservableValue<? extends Toggle>, o : Toggle, n:  Toggle)
            {
                var rb = simulationRadioButtonGroup.getSelectedToggle() as RadioButton

                if (rb != null) {
                    var s = rb.getText();
                    if (s.equals("Simulation")){
                    	simulation = true
                    }else{
                    	simulation = false
                    }
					updateTextFields()
				}
            }
        });

		// radiobutton recuit simulé ou q-learning
		this.aiRadioButtonGroup.selectedToggleProperty().addListener(new ChangeListener<Toggle>() {
			def changed(ob : ObservableValue<? extends Toggle>, o : Toggle, n : Toggle) {
				var rb = aiRadioButtonGroup.getSelectedToggle() as RadioButton
				if (rb != null) {
					var s = rb.getText();
					if (s.equals("Recuit simulé")) {
						recuit = true
                    } else {
						recuit = false
					}
					updateAIParamLabel
					updateTextFields()
				}
			}
		});

		this.dropShadow = new DropShadow()
		dropShadow.setRadius(5.0)
		dropShadow.setSpread(1.0)
		dropShadow.setColor(Color.WHITE)

		var eventHandler = new EventHandler<MouseEvent>() {
			def handle(^event : MouseEvent) {
				unselectBody
				selectedDronePane.visible = false
				selectedWarehousePane.visible = false
				unselectedPane.visible = true
			}
				}
		this.drawPane.addEventHandler(MouseEvent.MOUSE_PRESSED, eventHandler)
	}



	def initializeParamFields {
		// Allow only integers
		var fields = new ArrayList<TextField>
		fields.addAll(nbDronesTextField, nbEntrepotsTextField, nbClientsTextField)
		for (field : fields) {
			Platform.runLater(new Runnable() {
				@Override
				def run() {
					var listener = new ChangeListener<String> {

						var ignore : boolean

						def changed(observable : ObservableValue<? extends String>, oldValue : String,
							newValue : String) {
							if(ignore || newValue === null){
								return
							}

							if (newValue.matches("\\d*")) {
								field.text = newValue
							} else {
								ignore = true
								field.text = oldValue
								ignore = false
							}
						}

					}

					field.textProperty.addListener(listener)
				}
			})
		}
		// Allow floats
		fields.clear
		fields.addAll(paramTextField2)
		for (field : fields) {
			Platform.runLater(new Runnable() {
				@Override
				def run() {
					var listener = new ChangeListener<String> {

						var ignore : boolean

						def changed(observable : ObservableValue<? extends String>, oldValue : String,
							newValue : String) {
							if (ignore || newValue === null) {
								return
							}

							if (newValue.matches("[0]+([.][0-9]*)?") ||
								(!recuit && newValue.matches("[0-1]?")) ||
								(recuit && newValue.matches("[0]?"))) {
								field.text = newValue
							} else {
								ignore = true
								field.text = oldValue
								ignore = false
							}
						}

					}
					field.textProperty.addListener(listener)
				}
			})
		}
		fields.clear
		fields.addAll(paramTextField1, paramTextField3)
		for (field : fields) {
			Platform.runLater(new Runnable() {
				@Override
				def run() {
					var listener = new ChangeListener<String> {

						var ignore : boolean

						def changed(observable : ObservableValue<? extends String>, oldValue : String,
							newValue : String) {
							if (ignore || newValue === null) {
								return
							}

							if (recuit && (newValue.matches("[0-9]+([.][0-9]*)?") || newValue.matches("[0-9]*"))) {
								field.text = newValue
							}
							else if (!recuit && (newValue.matches("[0]+([.][0-9]*)?") || newValue.matches("[0-1]?"))) {
								field.text = newValue
							}
							else {
								ignore = true
								field.text = oldValue
								ignore = false
							}
						}

					}
					field.textProperty.addListener(listener)
				}
			})
		}
		// Allow specific floats for speed
		fields.clear
		fields.addAll(speedTextField)
		for (field : fields) {
			Platform.runLater(new Runnable() {
				@Override
				def run() {
					var listener = new ChangeListener<String> {

						var ignore : boolean

						def changed(observable : ObservableValue<? extends String>, oldValue : String,
							newValue : String) {
							if (ignore || newValue === null) {
								return
							}

							if (newValue.matches("[1-4]+([.][0-9]*)?") ||
								newValue.matches("[0]+([.]([1-9][0-9]*)*)?") || newValue.matches("[1-5]*")) {
								field.text = newValue
							} else {
								ignore = true
								field.text = oldValue
								ignore = false
							}
						}

					}

					field.textProperty.addListener(listener)
				}
			})
		}
		//Allow range of floats
		fields.clear
		fields.addAll(poidsColisTextField)
		for (field : fields) {
			Platform.runLater(new Runnable() {
				@Override
				def run() {
					var listener = new ChangeListener<String> {

						var ignore : boolean

						def changed(observable : ObservableValue<? extends String>, oldValue : String,
							newValue : String) {
							if (ignore || newValue === null) {
								return
							}

							if (newValue.matches("[0-5]+([.][0-9]*)?(-[0-5]*([.][0-9]*)?)?") ||
								newValue.matches("[0-9]*")) {
								field.text = newValue
							} else {
								ignore = true
								field.text = oldValue
								ignore = false
							}
						}

					}

					field.textProperty.addListener(listener)
				}
			})
		}
		//Allow for range of integers
		/*fields.clear
		fields.addAll(poidsColisTextField)
		for (field : fields) {
			Platform.runLater(new Runnable() {
				@Override
				def run() {
					var listener = new ChangeListener<String> {

						var ignore : boolean

						def changed(observable : ObservableValue<? extends String>, oldValue : String,
							newValue : String) {
							if (ignore || newValue === null){
								return
							}

							if (newValue.matches("[0-9]+-?[0-9]*") || newValue.matches("[0-9]*")) {
								field.text = newValue
							} else {
								ignore = true
								field.text = oldValue
								ignore = false
							}
						}

					}

					field.textProperty.addListener(listener)
				}
			})
		}*/
	}

	def initializeRightPane() {
		//System.out.println("InitRightPane")
		Platform.runLater(new Runnable() {
			@Override
			def run(){
				try{
					emitToAgents(new GetMapInfos(), true)
					System.out.println("Emit")
					deliveredPackages.text = "0"
				} catch(e : InterruptedException){
					e.printStackTrace();
				}
			}
		})
	}

	def updateTextFields() {
	 	if (simulation) {
			nbDronesTextField.setPromptText("ex: 5, 10...")
			nbEntrepotsTextField.setPromptText("ex: 1, 3...")
			nbClientsTextField.setPromptText("ex: 10, 30...")
			poidsColisTextField.setPromptText("ex: 1-5, 5...")
			speedTextField.setVisible(true)
			speedLabel.setVisible(true)
		} else {
			nbDronesTextField.setPromptText("ex: 5, 2-10...")
			nbEntrepotsTextField.setPromptText("ex: 1, 1-3...")
			nbClientsTextField.setPromptText("ex: 10, 10-30...")
			poidsColisTextField.setPromptText("ex: 5, 0.5-5...")
			speedTextField.setVisible(false)
			speedLabel.setVisible(false)
		}

		if (recuit) {
			// température initiale
			paramTextField1.setPromptText("ex: 600, 0.1-500..")
			// alpha
			paramTextField2.setPromptText("ex: 0, 0.9...")
			// nombre itérations par palier
			paramTextField3.setPromptText("ex: 10, 2...")

		} else {
			// alpha
			paramTextField1.setPromptText("ex: 0.1, 1...")
			// gamma
			paramTextField2.setPromptText("ex: 0.9, 0...")
			// epsilon
			paramTextField3.setPromptText("ex: 0.1, 1...")
		}
	}

	def updateAIParamLabel() {
		if (recuit) {
			paramLabel1.setText("T° initiale/range")
			paramLabel2.setText("Alpha")
			paramLabel3.setText("Itér. par pallier")
		} else {
			paramLabel1.setText("Alpha")
			paramLabel2.setText("Gamma")
			paramLabel3.setText("Epsilon")
		}
	}

	/*
	 * def initialize {
	 *
	 * if (!started.getAndSet(true)) {
			startAgentApplication(typeof(HelloAgent)) [
	 * //
			]
		}
	 * }
	 */


	@FXML
	def generateGraph {
		createParametersList
		this.inMultiTest = false


		if (!this.simulation) {
			if (this.managerId === null) {
				mainApp.showStatistics()
				createManager
			}
			else{
				if(this.started.get()){
					startAgent
					mainApp.showStatistics()
					this.resultsController.generateGraph

				}
				else {
					mainApp.showStatistics()
					this.resultsController.generateGraph
				}
			}
		}
		else {
			if (this.managerId === null) {
				createManager
			}
			else{
				this.bodies.clear
				this.droneBodies.clear
				this.warehouseBodies.clear
				this.clients.clear
				this.drawPane.children.clear

				val gc = drawZone.graphicsContext2D
				gc.clearRect(0, 0, drawZone.width, drawZone.height)
				emitGenerateGraph
			}
		}
	}

	def emitGenerateGraph(param : ArrayList = this.parameters){
		emitToAgents(new GenerateGraph(param), true)
	}

	 def createManager() {
		if (this.managerId === null) {
			System.out.println("create app manager")
			var id = UUID::randomUUID
			startAgentApplication(typeof(AppManager), id)[]
			managerId = id
			Thread.sleep(50)
		}
	}

	@FXML
	def startAgent {
		createParametersList()
		this.inMultiTest = false
		// start
		if (!started.getAndSet(true)) {
			// lance la simulation
			if (this.simulation) {
				var image = new Image((getClass().getResource("/resources/img/pause.png").toExternalForm()), 33, 33, true, true)
				this.playButtonImageView.setImage(image)
				this.stopButton.setDisable(false)
				this.restartButton.setDisable(false)

				this.stopped = false
				this.pause = false

				if (this.managerId === null){
					createManager()
					var nbDrone = this.nbDronesTextField.text == "" ? 1 : Integer.parseInt(this.nbDronesTextField.text)
					nbDrone *= this.nbEntrepotsTextField.text == "" ? 1 : Integer.parseInt(this.nbEntrepotsTextField.text)
					this.droneRP.text = nbDrone.toString
					this.entrepotsRP.text = this.nbEntrepotsTextField.text == "" ? "1" : this.nbEntrepotsTextField.text
					this.deliveredPackages.text = "0"
					this.remainingPackages.text = this.nbClientsTextField.text ==
						"" ? "1" : this.nbClientsTextField.text
				}
				else {
					System.out.println("Restart app manager")
					emitToAgents(new Restart, true)
				}

				this.startSimulation();

			} // multi-test
			else {
				mainApp.showStatistics();
				this.stopped = true
				started.set(false)
				if (this.managerId === null) {
					createManager()
				}
			}
		} else  {
			this.pause = !pause
			pauseSimulation

		}
	}

	@FXML
	def stopAgent {
		createParametersList()
		this.inMultiTest = false
		if (started.getAndSet(false)) {
			var image = new Image((getClass().getResource("/resources/img/play.png").toExternalForm()), 33, 33, true,true)
			this.playButtonImageView.setImage(image)
			this.stopButton.setDisable(true)
			this.restartButton.setDisable(true)
			this.stopped = true
			if (this.pause) {
				pauseSimulation
				this.pause = true
			} else {

			}
			this.bodies.clear
			this.droneBodies.clear
			this.warehouseBodies.clear
			this.clients.clear
			this.drawPane.children.clear

			emitToAgents(new CancelEvery, true)

			emitToAgents(new GetMapInfos, true)
			this.selectedDrone = null
		}
	}

	@FXML
	def restartSimulation {
		// Stop
		this.bodies.clear
		this.droneBodies.clear
		this.warehouseBodies.clear
		this.clients.clear
		this.drawPane.children.clear
		emitToAgents(new CancelEvery, true)
		// Restart
		createParametersList()
		// start
		if (this.managerId === null){
			createManager()
		}
		else {
			System.out.println("Restart app manager")
			emitToAgents(new Restart, true)
		}

		this.startSimulation();
	}

	@FXML
	def pauseSimulation {
		var image : Image
		if (pause) {
			image = new Image((getClass().getResource("/resources/img/play.png").toExternalForm()), 33, 33, true, true)
		}else {
			image = new Image((getClass().getResource("/resources/img/pause.png").toExternalForm()), 33, 33, true, true)
		}
		this.playButtonImageView.setImage(image)
		emitToAgents(new Pause, true)
	}

	def createParametersList {
		this.parameters.clear
		this.parameters.add(this.inMultiTest == true ? false : simulation)
		this.parameters.add(recuit)
		this.parameters.add(createRange(getNbDronesInput))
		this.parameters.add(createRange(getNbEntrepotsInput))
		this.parameters.add(createRange(getNbClientsInput))
		this.parameters.add(createRange(getPoidsColisInput))
		if (recuit) {
			this.parameters.add(createRange(getParam1Input))
		} else {
			this.parameters.add(getParam1Input)
		}
		this.parameters.add(getParam2Input)
		this.parameters.add(getParam3Input)

		/* for (var j = 0; j < this.parameters.size; j++) {
		 * System.out.println("this.parameters["+j+"] : " + this.parameters.get(j))
		 * }
		 */
		this.parameters.add(createRange(getSpeedInput))
	}


	def createRange(st : String) : List<Float> {
		var ret : List<Float> = new ArrayList()
		if (st.contains('-')) {
    		var nb = ""
	        for (var i = 0; i < st.length; i++) {
	        	if (Character.compare(st.charAt(i) as char, '-') != 0) {
	        		nb += st.charAt(i)
	        	} else {
	        		if (0 >= nb as float) {
	        			ret.add(1f)
	        		} else {
		        		ret.add(checkNumbers(nb) as float)
	        		}
	        		nb = ""
	        	}
        		if (i == st.length - 1) {
        			if (ret.get(0) > checkNumbers(nb) as float) {
		        		ret.add(ret.get(0) + 1)
        			} else {
		        		ret.add(checkNumbers(nb) as float)
        			}
        		}
        	}
		} else {
			ret.add(checkNumbers(st) as float)
		}
		return ret
	}

	def addClient(client : Client) {
		this.clients.add(client)
	}

	def addBody(body : Body, type : String) {
		this.bodies.put(body.getId, body)
		if (type.equals("DRONE")){
			this.droneBodies.put(body.getId, body as DroneBody)
			//add mouse listener to each drone
			for (entry : this.droneBodies.entrySet()) {
				var eventHandler = new EventHandler<MouseEvent>() {
					def handle(^event : MouseEvent) {
						displayDroneInfos(body.id)
						selectedDronePane.visible = true
						unselectedPane.visible = false
						selectedWarehousePane.visible = false
						throw new UnsupportedOperationException("TODO: auto-generated method stub")
					}
				}
				entry.value.imageView.addEventHandler(MouseEvent.MOUSE_PRESSED, eventHandler)
			}
		} else if (type.equals("WAREHOUSE")) {
			this.warehouseBodies.put(body.getId, body as WarehouseBody)
			//add warehouse listener to each warehouse
			for (entry : this.warehouseBodies.entrySet()) {
				var eventHandler = new EventHandler<MouseEvent>() {
					def handle(^event : MouseEvent) {
						unselectedPane.visible = false
						selectedDronePane.visible = false
						selectedWarehousePane.visible = true
						displayWarehouseInfos(body.id)
						throw new UnsupportedOperationException("TODO: auto-generated method stub")
					}
				}
				warehouseBodies.get(entry.getKey()).imageView.addEventHandler(MouseEvent.MOUSE_PRESSED, eventHandler)
		}
		}

	}

	def displayDroneInfos(id : UUID) : void {
		this.selectedDrone = this.bodies.get(id) as DroneBody
		var pos = 0
		if(droneBodies.containsKey(id)){
			pos = droneBodies.headMap(id).size()
		}
		droneIndex = pos+1
		packageWeight = this.selectedDrone.actualCharge
		deliveredDronePackagesLabel.setText(this.selectedDrone.nbPackages as int + " / " + this.selectedDrone.totalPackages as int )
		nextPositionLabel.setText(this.selectedDrone.nextDestination.x + ", " + this.selectedDrone.nextDestination.y)
		if (this.selectedDrone.finishedDelivering) {
			nextDestinationTypeLabel.setText("Entrepôt")
		}else {
			nextDestinationTypeLabel.setText("Client")
		}
		battery = (this.selectedDrone.actualBattery / 16.28) as int
	}

	def displayWarehouseInfos(id : UUID) : void {
		this.selectedWarehouse = this.bodies.get(id) as WarehouseBody
		var pos = 0
		var dronesLinked = 0
		if (warehouseBodies.containsKey(id)) {
			pos = warehouseBodies.headMap(id).size()

			dronesLinked = warehouseBodies.get(id).droneBodies.size()
		}
		warehouseIndex = pos + 1
		dronesAtWarehouse = dronesLinked
		if(nbDronesInput.isEmpty){
			dronesPerWarehouse = 1
		} else {
			dronesPerWarehouse = nbDronesInput as int
		}

	}

	def startSimulation() {
	       	var timer = new AnimationTimer() {
            @Override
            def handle(now : long) {
				var lastUpdate = 0l;
				if (now - lastUpdate >= 28_000_000) {
					update();
					lastUpdate = now;
				}
			}
        };
        this.selectedDrone = null
        timer.start();
        initializeRightPane()
	}

	def initalizeImageView() {
		for (b : this.bodies.values()) {
			Platform.runLater(new Runnable() {
	            @Override
	            def run() {
					b.imageView.setImage(b.image)
					b.imageView.setX(b.position.x)
					b.imageView.setY(b.position.y)
					drawPane.children.add(b.imageView)
	            }
        	})
		}

		val gc = drawZone.graphicsContext2D

		for (c : this.clients) {
			c.drawItself(gc);

		}
	}

	def unselectBody() {
		this.selectedDrone = null
		this.selectedWarehouse = null
	}

	def update() {
		for (c : drawPane.children) {
			var body = this.bodies.get(UUID.fromString(c.id))
			var imageView = c as ImageView
			imageView.setImage(body.image)
			imageView.setX(body.position.x)
			imageView.setY(body.position.y)
			//System.out.println("X : " + test.position.x + " -- Y : " + test.position.y)
			//System.out.println(test)
			if (this.selectedWarehouse == body || this.selectedDrone == body) {
				imageView.setEffect(this.dropShadow)
			} else {
				imageView.setEffect(null)

			}

		}
		val gc = drawZone.graphicsContext2D
		gc.clearRect(0, 0, drawZone.width, drawZone.height)
		for (c : this.clients) {
			c.drawItself(gc);
		}
		if (this.selectedDrone !== null){
			//System.out.println("Body id : " + this.selectedDrone.id)
			//System.out.println("Body : " + this.selectedDrone)
			//this.droneBatteryCircle.centerX = this.selectedDrone.posX
			//this.droneBatteryCircle.centerY = this.selectedDrone.posY
			var radius = SolutionSolver.droneDistanceAutonomy(this.selectedDrone.actualCharge, this.selectedDrone.actualBattery)
			//System.out.println("Actual charge : " + this.selectedDrone.actualCharge)
			//System.out.println("Actual Battery : " + this.selectedDrone.actualBattery)
			//System.out.println("Radius : " + radius)
			radius *= SimulationParameters.mapRatio
			//this.droneBatteryCircle.radius = radius
			//this.droneBatteryCircle.visible = true
			var stops = #[new Stop(0.0, Color.RED.deriveColor(0, 1, 1, 0.4)),
				new Stop(1.0, Color.WHITE.deriveColor(0, 1, 1, 0.4))]
			var gradient = new RadialGradient(0, 0, 0.5, 0.5,
				0.5, true,
				CycleMethod.NO_CYCLE, stops);
			gc.setFill(gradient)
			gc.fillOval(this.selectedDrone.posX - radius, this.selectedDrone.posY - radius, radius*2, radius*2)

		}
		else {
			this.droneBatteryCircle.visible = false
		}

		if (this.selectedDrone != null) {
			displayDroneInfos(selectedDrone.id)
		}
		if(this.selectedWarehouse != null){
			displayWarehouseInfos(selectedWarehouse.id)
		}
	}

	def getHeight() {
		return this.height;
	}

	def getWidth() {
		return this.width;
	}

	def getClients() : List<Client>{
		return this.clients;
	}

	def getNbDronesInput() : String {
		return this.nbDronesTextField.text
	}

	def getNbEntrepotsInput() : String {
		return this.nbEntrepotsTextField.text
	}

	def getNbClientsInput() : String {
		return this.nbClientsTextField.text
	}

	def getPoidsColisInput() : String {
		return this.poidsColisTextField.text
	}

	def getSpeedInput() : String {
		return this.speedTextField.text
	}

	def getParam1Input() : String {
		return this.paramTextField1.text
	}

	/*
	def getParam1Input() : float {
		var ret = checkNumbers(this.paramTextField1.text) as float
		if (recuit) {
		} else {

		}
		return ret
	 * }
	 */

	def getParam2Input() : float {
		var ret = checkNumbers(this.paramTextField2.text) as float
		if (recuit){
			if (ret>=1){
				ret = 0.9f
			}
		} else {

		}
		return ret
	}

	def getParam3Input() : float {
		var ret = checkNumbers(this.paramTextField3.text) as float
		if (recuit) {
			if (ret < 1){
				ret = 1
			}
		} else {

		}
		return ret
	}

	def checkNumbers(text : String) : float {
		var ret : float
		try {
			ret = Float.parseFloat(text);
			if (ret < 0){
				ret = 0.9f
			}
		} catch (ex : NumberFormatException) {
			ret = 1
		}
		return ret
	}

	def getStarted() : Boolean {
		return this.started.get()
	}

	def getParameters() : ArrayList {
		return this.parameters
	}

	def getMultiTestsRadioButton () : RadioButton {
		return this.multiTestsRadioButton;
	}

	def getSimulation() : Boolean {
		return this.simulation
	}

	def getAppManager() {
		return this.appManager
	}

	def setAppManager(manager : AppManager){
		this.appManager = manager
	}

	def getStopped{
		return this.stopped
	}

	def getWarehouseBodies {
		return this.warehouseBodies
	}

	def setResultsController(resultsController : ResultsController) {
		synchronized (this) {
			this.resultsController = resultsController
		}
	}

	def getResultsController() : ResultsController {
		return this.resultsController
	}

	def exportData(filename : String) {
		System.out.println("Send filename : " + filename)
		emitToAgents(new ExportDataEvent(filename), true)
	}

	def importData(filename : String) {
		this.bodies.clear
		this.droneBodies.clear
		this.warehouseBodies.clear
		this.clients.clear
		this.drawPane.children.clear

		val gc = drawZone.graphicsContext2D
		gc.clearRect(0, 0, drawZone.width, drawZone.height)
		emitToAgents(new ImportDataEvent(filename), true)
	}

	def simulateStop() {
		Platform.runLater(new Runnable() {
			@Override
			def run() {
				stopAgent
				//startAgent
			}
		})
	}

	def simulateStart() {
		Platform.runLater(new Runnable() {
			@Override
			def run() {
				//stopAgent
				startAgent
			}
		})
	}

	def updateMapInfos(nbClients : int, nbWarehouse : int, stepTime : int) {
		Platform.runLater(new Runnable() {
			@Override
			def run() {
				remainingPackages.text = nbClients.toString
				if (!stopped) {
					var nbDrone = nbDronesTextField.text == "" ? 1 : Integer.parseInt(nbDronesTextField.text)
					nbDrone *= nbWarehouse
					droneRP.text = nbDrone.toString
				} else {
					droneRP.text = ""
				}
				deliveredPackages.text = "0"
				entrepotsRP.text = nbWarehouse.toString
			}
		})
		/*
		 *
		if (!getClients.isEmpty) {
			var temp : float = 0
			for (c : getClients) {
				temp += c.mapPoint.packageWeight as float
			}
			temp = temp / getClients.size()
			setAveragePackage(temp)
		 */

		if(this.started.get()){
			timeRatio = SolutionSolver.stepNumberToRealTime(1) * 1000 / stepTime
        	initTimer
			//System.out.println("timeRatio : "+ timeRatio)
		}

	}

	def initTimer() {
		val refreshRate = 10
		this.timeElapsed = 0l
		this.timer = new Timer()
		this.myTask = new TimerTask() {
			@Override
			def run() {
				if (pause) {
					//System.out.println("paused")
				}
				while (!started.get()) {
				}
				updateTimer(refreshRate, 0l)
				if (stopped) {
					timeElapsed = 0
				}
			}
		}
		timer.schedule(myTask, refreshRate, refreshRate);
	}

	def updateTimer(refreshRate : int, previousTimer : long) {
		//System.out.println("timeRatio : " + timeRatio + "   timeElapsed : " + timeElapsed)
		timeElapsed += previousTimer + refreshRate * this.timeRatio as long
		formatTimeElapsed(timeElapsed)
	}

	def newDeposit {
		Platform.runLater(new Runnable() {
			@Override
			def run() {
				var nbRemaining = Integer.parseInt(remainingPackages.text) - 1
				var nbDelivered = Integer.parseInt(deliveredPackages.text) + 1

				remainingPackages.text = nbRemaining.toString
				deliveredPackages.text = nbDelivered.toString
			}
		})

	}

	def getManagerId() : UUID {
		return this.managerId
	}

	def getInMultiTest{
		return this.inMultiTest
	}

	def setInMultiTest (inMultiTest : boolean){
		this.inMultiTest = inMultiTest
	}

	def getDroneRP() : String {
		return this.droneRP.toString()
	}


	def setDroneRP(nb : String) {
		this.droneRP.setText(nb)
	}

	def getEntrepotsRP() : String {
		return this.entrepotsRP.toString()
	}

	def setEntrepotsRP(nb : String){
		this.entrepotsRP.setText(nb)
	}

	def getDroneIndex() : String {
		return this.droneIndex.toString()
	}

	def setDroneIndex(index : int){
		this.droneIndex.setText(index.toString())
	}

	def getWarehouseIndex() : String {
		return this.warehouseIndex.toString()
	}

	def setWarehouseIndex(index : int) {
		this.warehouseIndex.setText(index.toString())
	}

	def setDronesAtWarehouse(nb : int) {
		this.dronesAtWarehouse.setText(nb.toString())
	}

	def setDronesPerWarehouse(nb : int) {
		this.dronesPerWarehouse.setText(nb.toString())
	}



	def formatTimeElapsed(time : long) {
		val hms = String.format("%02d:%02d:%02d",
			TimeUnit.MILLISECONDS.toHours(time),
			TimeUnit.MILLISECONDS.toMinutes(time) - TimeUnit.HOURS.toMinutes(TimeUnit.MILLISECONDS.toHours(time)),
			TimeUnit.MILLISECONDS.toSeconds(time) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(time)));
		Platform.runLater(new Runnable() {
			@Override
			def run() {
				timeElapsedLabel.text = hms
			}
		})
	}

	def setRemainingPackages(nb : int) {
		this.remainingPackages.setText(nb.toString())
	}

	def getRemainingPackages() : int {
		return Integer.parseInt(this.remainingPackages.getText())
	}

	def setDeliveredPackages(nb : int) {
		this.deliveredPackages.setText(nb.toString())
	}

	def getDeliveredPackages() : int {
		return Integer.parseInt(this.deliveredPackages.getText())
	}

	def setBattery(nb : int){
		this.battery.setText(nb.toString())
	}

	def setSpeedRatio(nb : float) {
		this.speedRatio = nb
	}

	def getSpeedRatio() : float {
		return this.speedRatio
	}

	def setAveragePackage(nb : float) {
		this.averagePackage.setText(nb.toString())
	}

	def getAveragePackage() : float {
		return Float.parseFloat(this.averagePackage.getText())
	}

	def setPackageWeight(nb : float) {
		this.packageWeight.setText(nb.toString())
	}

	def setManagerInitialized(bool : boolean) {
		this.managerInitialized = bool
	}

	def getManagerInitialized() : boolean {
		return this.managerInitialized
	}

	def emitInitializeResultGraph{
		emitToAgents(new InitializeResultGraph(), true)
	}
}
