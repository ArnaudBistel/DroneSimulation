package controller

import agents.AppManager
import agents.ExportDataEvent
import agents.ImportDataEvent
import agents.Restart

import gui.Body
import gui.Client
import gui.DroneBody
import gui.MainApp
import gui.WarehouseBody

import io.sarl.javafx.FxViewerController
import java.util.Random;
import java.util.ArrayList
import java.util.List
import java.util.Map
import java.util.TreeMap
import java.util.UUID
import java.util.concurrent.atomic.AtomicBoolean
import javafx.application.Platform
import javafx.scene.paint.Color
import javafx.animation.AnimationTimer
import javafx.application.Platform
import javafx.beans.value.ChangeListener
import javafx.beans.value.ObservableValue
import javafx.fxml.FXML
import javafx.scene.chart.XYChart
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.CategoryAxis;
import javafx.css.PseudoClass
import javafx.scene.image.Image
import javafx.scene.canvas.Canvas
import javafx.scene.image.ImageView
import javafx.scene.control.Button
import javafx.scene.control.Label
import javafx.scene.control.RadioButton
import javafx.scene.control.TextField
import javafx.scene.control.Toggle
import javafx.scene.shape.Line
import javafx.scene.control.ToggleGroup
import javafx.scene.layout.Pane
import javafx.^event.ActionEvent
import javafx.scene.chart.LineChart;
import javafx.^event.EventHandler;
import javafx.scene.input.MouseEvent;
import agents.CancelEvery
import agents.GenerateGraph
import map.MapPoint
import gui.PathEnum
import solutionSolver.solutionTester.MultiTesterSimulatedAnnealing
import map.SimulationMap
import utils.variables.SimulationParameters
import solutionSolver.solutionTester.MultiTesterQLearning

class ResultsController extends FxViewerController {
	
	
	var appManager : AppManager = null

	var mainApp : MainApp;

	@FXML
	var startButton : Button
	@FXML
	var generateButton : Button

	var width : Integer
	var height : Integer

	@FXML
	var backgroundCanvas : Canvas

	@FXML
	var drawPane : Pane

	@FXML
	var drawPaneRoutes : Pane

	@FXML
	var nbDronesTextField : TextField
	@FXML
	var nbEntrepotsTextField : TextField
	@FXML
	var nbClientsTextField : TextField
	@FXML
	var poidsColisTextField : TextField

	@FXML
	var temperatureTextField : TextField
	@FXML
	var alphaTextField1 : TextField
	@FXML
	var nbIterTextField : TextField

	@FXML
	var alphaQTextField : TextField
	@FXML
	var gammaTextField : TextField
	@FXML
	var epsilonTextField : TextField

	@FXML
	var lineChartRS1 : LineChart<String, Number>

	@FXML
	var lineChartRS2 : LineChart<String, Number>

	@FXML
	var lineChartQL1 : LineChart<String, Number>

	@FXML
	var lineChartQL2 : LineChart<String, Number>

	@FXML
	var bestCostLabel : Label
	@FXML
	var bestDurationLabel : Label
	@FXML
	var selectedCostLabel : Label
	@FXML
	var selectedDurationLabel : Label
	@FXML
	var iamethodLabel : Label

	var parameters : ArrayList = new ArrayList()

	var mainWindowController : MainWindowController

	var simMap : SimulationMap 
	var warehouses : List<MapPoint> = new ArrayList<MapPoint>()
	var clients : List<Client> = new ArrayList<Client>()

	var mtSimAnnealing : MultiTesterSimulatedAnnealing
	var mtQLearning : MultiTesterQLearning

	@Pure
	def init(mainApp : MainApp, mainWindowController : MainWindowController) {
		this.mainApp = mainApp;
		this.mainWindowController = mainWindowController;
		this.appManager = this.mainWindowController.appManager
		this.width = drawPane.width as Integer;
		this.height = drawPane.height as Integer;
		this.mainWindowController.inMultiTest = true
		val gc = backgroundCanvas.graphicsContext2D
		gc.clearRect(0, 0, backgroundCanvas.width, backgroundCanvas.height)
		gc.setFill(Color.WHITE);
		gc.fillRect(0, 0, backgroundCanvas.getWidth(), backgroundCanvas.getHeight());	
		initializeFieldsValues
		initializeParamFields

		/*
		this.lineChartRS1.setLegendVisible(false);
		this.lineChartRS2.setLegendVisible(false);
		this.lineChartQL1.setLegendVisible(false);
		this.lineChartQL2.setLegendVisible(false);
		*/
		
		Platform.runLater(new Runnable() {
				@Override
				def run() {
					var listener = new ChangeListener<String> {

						var ignore : boolean

						def changed(observable : ObservableValue<? extends String>, oldValue : String,
							newValue : String) {
							if (ignore || newValue === null) {
								return
							}

							if (newValue != oldValue) {
								startButton.setDisable(true)
							}
							}
						}
			
				nbDronesTextField.textProperty.addListener(listener)
				nbEntrepotsTextField.textProperty.addListener(listener)
				nbClientsTextField.textProperty.addListener(listener)
				poidsColisTextField.textProperty.addListener(listener)
			}
		})
		this.mainWindowController.emitInitializeResultGraph
	}


	@FXML
	def generateGraph() {
		drawPaneRoutes.children.clear
		createParametersList()
		this.mainWindowController.createParametersList
		if (this.mainWindowController.managerId === null) {
			this.mainWindowController.createManager
		} else {
			this.mainWindowController.emitGenerateGraph(this.parameters)
			//displayCharts
			//this.startTimer
		}
		startButton.setDisable(false)
	}
	
	def clearView() {
		drawPane.children.clear
		drawPaneRoutes.children.clear
		lineChartRS1.data.clear
		lineChartRS2.data.clear
		lineChartQL1.data.clear
		lineChartQL2.data.clear
	}
	
	@FXML
	def startTest() {
		if(this.clients.size <= 0) {
			generateGraph()
		}
		//récupération paramètres
		var nbDrones = createRange(getNbDronesInput).get(0).toInteger
		var temp = SATempRange
		var alphaSA = SAAlphaRange
		var iter = SAnbIterPalierRange
		var alphaQL = QLAlphaRange
		var gamma = QLGammaRange
		var epsilon = QLEpsilonRange
		//lancement
		mtSimAnnealing = new MultiTesterSimulatedAnnealing(
			simMap, SimulationParameters.MT_NB_STEP, SimulationParameters.MT_NB_TEST_BY_STEP, nbDrones,
			temp.get(0), temp.get(1),
			SimulationParameters.MT_TEMP_TRESHOLD, SimulationParameters.MT_TEMP_TRESHOLD,
			alphaSA.get(0), alphaSA.get(1),
			iter.get(0), iter.get(1)
		)
		mtSimAnnealing.runMultiTest

		mtQLearning = new MultiTesterQLearning(
			simMap, SimulationParameters.MT_NB_STEP, SimulationParameters.MT_NB_TEST_BY_STEP, nbDrones,
		    alphaQL.get(0), alphaQL.get(1),
		    gamma.get(0), gamma.get(1),
		    epsilon.get(0), epsilon.get(1),
			SimulationParameters.MT_NB_EPISODE_Q_LEARNING, SimulationParameters.MT_NB_EPISODE_Q_LEARNING
		)
		//mtQLearning.runMultiTest
		
		
		displayCharts(
			mtSimAnnealing.energyCostResults, mtSimAnnealing.timeCostResults,
			mtQLearning.energyCostResults, mtQLearning.timeCostResults
		)
		displayDronesRoutes(mtSimAnnealing.bestSolution(mtSimAnnealing.energyCostResults))
		
		
		//TODO if no manager -> generate graph
		// Fetch all values and create a MultiTester for each method
		// Display charts with the values computed
	}
	
	def initializeFieldsValues {
		
		nbDronesTextField.text = this.mainWindowController.nbDronesInput
		nbClientsTextField.text = this.mainWindowController.nbClientsInput
		nbEntrepotsTextField.text = this.mainWindowController.nbEntrepotsInput
		
		poidsColisTextField.text = this.mainWindowController.poidsColisInput
		
		var recuit = this.mainWindowController.parameters.get(1) as Boolean
		
		if (recuit) {
			temperatureTextField.text = this.mainWindowController.param1Input
			alphaTextField1.text = this.mainWindowController.param2Input as String
			nbIterTextField.text = this.mainWindowController.param3Input as String
		} 
		else {
			alphaQTextField.text = this.mainWindowController.param1Input
			gammaTextField.text = this.mainWindowController.param2Input as String
			epsilonTextField.text = this.mainWindowController.param3Input as String
		}
	}
	
	def initializeParamFields {
		// Allow only integers
		var fields = new ArrayList<TextField>
		val concurrentFields = new ArrayList<TextField>
		concurrentFields.addAll(nbDronesTextField, temperatureTextField, alphaTextField1, nbIterTextField,
			alphaQTextField, gammaTextField, epsilonTextField)
		fields.addAll(nbEntrepotsTextField, nbClientsTextField)
		for (field : fields) {
			Platform.runLater(new Runnable() {
				@Override
				def run() {
					var listener = new ChangeListener<String> {

						var ignore : boolean

						def changed(observable : ObservableValue<? extends String>, oldValue : String,
							newValue : String) {
							if (ignore || newValue === null) {
								return
							}

							if (newValue.matches("\\d*")) {
								field.text = newValue
							} else {
								ignore = true
								field.text = oldValue
								ignore = false
							}
						}

					}

					field.textProperty.addListener(listener)
				}
			})
		}
		// Allow floats or range of floats for SA
		fields.clear
		fields.addAll(temperatureTextField, alphaTextField1, nbIterTextField)
		for (field : fields) {
			Platform.runLater(new Runnable() {
				@Override
				def run() {
					var listener = new ChangeListener<String> {

						var ignore : boolean

						def changed(observable : ObservableValue<? extends String>, oldValue : String,
							newValue : String) {
							if (ignore || newValue === null) {
								return
							}

							var onlyRange = true
							var concurrents = new ArrayList<TextField>
							concurrents.addAll(concurrentFields.get(0), concurrentFields.get(1),
								concurrentFields.get(2), concurrentFields.get(3))
							for (concurrent : concurrents) {
								if (concurrent.text.contains("-") && concurrent != field) {
									onlyRange = false
									break
								}
							}
							

							if (onlyRange && (newValue.matches("[0-9]+([.][0-9]*)?(-[0-9]*([.][0-9]*)?)?") ||
								newValue.matches("[0-9]*"))) {
								
								field.text = newValue
							}
							else if (!onlyRange && (newValue.matches("[0-9]+([.][0-9]*)?") ||
								newValue.matches("[0-9]*"))) {
								
								field.text = newValue
							}
							else {
								ignore = true
								field.text = oldValue
								ignore = false
							}
						}

					}

					field.textProperty.addListener(listener)
				}
			})
		}
		// Allow floats or range of floats for Q Learning
		fields.clear
		fields.addAll(alphaQTextField, gammaTextField, epsilonTextField)
		for (field : fields) {
			Platform.runLater(new Runnable() {
				@Override
				def run() {
					var listener = new ChangeListener<String> {

						var ignore : boolean

						def changed(observable : ObservableValue<? extends String>, oldValue : String,
							newValue : String) {
							if (ignore || newValue === null) {
								return
							}

							var onlyRange = true
							var concurrents = new ArrayList<TextField>
							concurrents.addAll(concurrentFields.get(0), concurrentFields.get(4),
								concurrentFields.get(5), concurrentFields.get(6))
							for (concurrent : concurrents) {
								if (concurrent.text.contains("-") && concurrent != field) {
									onlyRange = false
									break
								}
							}

							if (onlyRange && (newValue.matches("[0-9]+([.][0-9]*)?(-[0-9]*([.][0-9]*)?)?") ||
								newValue.matches("[0-9]*"))) {
								
								field.text = newValue
							} else if (!onlyRange && (newValue.matches("[0-9]+([.][0-9]*)?") ||
								newValue.matches("[0-9]*"))) {
								
								field.text = newValue
							} else {
								ignore = true
								field.text = oldValue
								ignore = false
							}
						}

					}

					field.textProperty.addListener(listener)
				}
			})
		}

		// Allow range of floats
		fields.clear
		fields.addAll(poidsColisTextField)
		for (field : fields) {
			Platform.runLater(new Runnable() {
				@Override
				def run() {
					var listener = new ChangeListener<String> {

						var ignore : boolean

						def changed(observable : ObservableValue<? extends String>, oldValue : String,
							newValue : String) {
							if (ignore || newValue === null) {
								return
							}

							if (newValue.matches("[0-9]+([.][0-9]*)?(-[0-9]*([.][0-9]*)?)?") ||
								newValue.matches("[0-9]*")) {
								field.text = newValue
							} else {
								ignore = true
								field.text = oldValue
								ignore = false
							}
						}

					}

					field.textProperty.addListener(listener)
				}
			})
		}
		// Allow for range of integers
		fields.clear
		fields.addAll(nbDronesTextField)
		
		for (field : fields) {
			Platform.runLater(new Runnable() {
				@Override
				def run() {
					var listener = new ChangeListener<String> {

						var ignore : boolean
						 
						def changed(observable : ObservableValue<? extends String>, oldValue : String,
							newValue : String) {
							if (ignore || newValue === null) {
								return
							}
							
							var onlyRange = true
							for (concurrent : concurrentFields){
								if (concurrent.text.contains("-") && concurrent != field) {
									onlyRange = false
									break
								}
							}
							
							if (onlyRange && (newValue.matches("[0-9]+-?[0-9]*") || newValue.matches("[0-9]*"))) {
								field.text = newValue
							}
							else if (!onlyRange && newValue.matches("[0-9]*")) {
								field.text = newValue
							} 
							else {
								ignore = true
								field.text = oldValue
								ignore = false
							}
						}

					}

					field.textProperty.addListener(listener)
				}
			})
		}
	}

	def createParametersList() {
		this.parameters.clear
		//this.parameters.add(simulation)
		//this.parameters.add(recuit)
		// multitest
		this.parameters.add(false)
		// methode AI
		this.parameters.add(true)
		// nb drones
		this.parameters.add(createRange(getNbDronesInput))
		this.parameters.add(createRange(getNbEntrepotsInput))
		this.parameters.add(createRange(getNbClientsInput))
		this.parameters.add(createRange(getPoidsColisInput))
		
		/*if (recuit) {
			this.parameters.add(createRange(getParam1Input))
		} else {
			this.parameters.add(getParam1Input)
		}
		this.parameters.add(getParam2Input)
		this.parameters.add(getParam3Input)
		*/
		/*for (var j = 0; j < this.parameters.size; j++) {
		 * System.out.println("this.parameters["+j+"] : " + this.parameters.get(j))
		 * }
		 */
		//this.parameters.add(createRange(getSpeedInput))
	}

	def createRange(st : String) : List<Float> {
		var ret : List<Float> = new ArrayList()
		if (st.contains('-')) {
			var nb = ""
	        for (var i = 0; i < st.length; i++) {
				if (Character.compare(st.charAt(i) as char, '-') != 0) {
	        		nb += st.charAt(i)
				} else {
					if (0 >= nb as float) {
						ret.add(1f)
					} else {
						ret.add(checkNumbers(nb) as float)
					}
					nb = ""    		
	        	}
        		if (i == st.length - 1) {
        			if (ret.get(0) > checkNumbers(nb) as float) {
						ret.add(ret.get(0) + 1)
					} else {
						ret.add(checkNumbers(nb) as float)
					}
				}
			}
		} else {
			ret.add(checkNumbers(st) as float)
		}
		return ret
	}

	def checkNumbers(text : String) : float {
		var ret : float
		try {
			ret = Float.parseFloat(text);
			if (ret < 0) {
				ret = 0.9f
			}
		} catch (ex : NumberFormatException) {
			ret = 1
		}
		return ret
	}

	def startTimer() {
		/*
		var timer = new AnimationTimer() {
			@Override
			def handle(now : long) {
				var lastUpdate = 0l;
				if (now - lastUpdate >= 28_000_000) {
					update();
					lastUpdate = now;
				}
			}
		};
		timer.start();*/
	}

	
	def displayCharts(
		SACost : List<Double>, SATime : List<Double>,
		QCost : List<Double>, QTime : List<Double>
	) {
		this.lineChartRS1.data.clear
		this.lineChartRS2.data.clear
		this.lineChartQL1.data.clear
		this.lineChartQL2.data.clear
		
		var xAxis = new CategoryAxis();
		
		// recuit
		var seriesRS1 = new XYChart.Series<String, Number>()
		seriesRS1.setName("Coût Recuit")
		var i = 0
		var min = Double.MAX_VALUE
		var max = Double.MIN_VALUE
		for (e : SACost) {
			if(e < min)
				min = e;
			if(e > max)
				max = e;
			seriesRS1.data.add(new XYChart.Data<String, Number>("" + i, e))
			i++
		}

		var seriesRS2 = new XYChart.Series<String, Number>()
		seriesRS2.setName("Temps Recuit")
		i = 0
		for (e : SATime) {
			seriesRS2.data.add(new XYChart.Data<String, Number>("" + i, e))
			i++
		}
		
		var yAxis = new NumberAxis(min, max, 0.01*(max - min))
		//this.lineChartRS1 = new LineChart<String,Number>(xAxis, yAxis) //ne met pas a jour
		this.lineChartRS1.data.addAll(seriesRS1)
		i = 0
		for (data : seriesRS1.getData()) {
			data.node.addEventHandler(MouseEvent.MOUSE_CLICKED, new EventHandler<MouseEvent>() {
				@Override
				def handle(e : MouseEvent) {
					displayDronesRoutes(Integer.parseInt(data.XValue))
					selectedCostLabel.setText("" + data.YValue)
					selectedDurationLabel.setText("" + SATime.get(data.XValue as int))
					iamethodLabel.setText("Recuit Simulé")
					var bestId = mtSimAnnealing.bestSolution(mtSimAnnealing.energyCostResults)
					bestCostLabel.setText("" + SACost.get(bestId))
					bestDurationLabel.setText("" + SATime.get(bestId))
					System.out.println("X" + data.XValue + " y : " + data.YValue)
				}
			})
			i++
		}


		this.lineChartRS2.data.addAll(seriesRS2)
		for (data : seriesRS2.getData()) {
			data.node.addEventHandler(MouseEvent.MOUSE_CLICKED, new EventHandler<MouseEvent>() {
				@Override
				def handle(e : MouseEvent) {
					displayDronesRoutes(Integer.parseInt(data.XValue))
					selectedDurationLabel.setText("" + data.YValue)
					selectedCostLabel.setText("" + SACost.get(data.XValue as int))
					iamethodLabel.setText("Recuit Simulé")
					var bestId = mtSimAnnealing.bestSolution(mtSimAnnealing.energyCostResults)
					bestCostLabel.setText("" + SACost.get(bestId))
					bestDurationLabel.setText("" + SATime.get(bestId))
					System.out.println("X" + data.XValue + " y : " + data.YValue)
				}
			})
		}

		// Q-Learning
		var seriesQL1 = new XYChart.Series<String, Number>()
		seriesQL1.setName("Coût QLearning")		
		
		i = 0
		for (e : QCost) {
			seriesQL1.data.add(new XYChart.Data<String, Number>(""+i, e))

			i++
		}
		// this.lineChartQL1.setStyle(".default-color0.chart-series-line { -fx-stroke: #137baf; }")
		this.lineChartQL1.data.addAll(seriesQL1)
		for (data : seriesQL1.getData()) {
			data.node.addEventHandler(MouseEvent.MOUSE_CLICKED, new EventHandler<MouseEvent>() {
				@Override
				def handle(e : MouseEvent) {
					displayDronesRoutes(Integer.parseInt(data.XValue))
					System.out.println("X" + data.XValue + " y : " + data.YValue)
				}
			})
		}

		var seriesQL2 = new XYChart.Series<String, Number>()
		seriesQL2.setName("Temps")
		
		i = 0
		for (e : QTime) {
			seriesQL2.data.add(new XYChart.Data<String, Number>(""+i, e))
			i++
		}
		// this.lineChartQL2.setStyle(".default-color0.chart-series-line { -fx-stroke: #d8a9a9; }")
		this.lineChartQL2.data.addAll(seriesQL2)
		
		for (data : seriesQL2.getData()) {
			data.node.addEventHandler(MouseEvent.MOUSE_CLICKED, new EventHandler<MouseEvent>() {
				@Override
				def handle(e : MouseEvent) {
					displayDronesRoutes(Integer.parseInt(data.XValue))
					System.out.println("X" + data.XValue + " y : " + data.YValue)
				}
			})
		}

	}
	
	

	def displayDronesRoutes (idx : int) {
		
		drawPaneRoutes.children.clear
		var rand = new Random(0)
		var s = mtSimAnnealing.solutionsHistory.get(idx)

		for (path : s) {
			var routes = new ArrayList()
			for (e : path) {
				routes.add(new Client(e, false))
			}
			var col = Color.color(rand.nextDouble, rand.nextDouble, rand.nextDouble)
			var k = 0
			while (k < routes.size - 1) {
				var c0 = routes.get(k)
				var c1 = routes.get(k + 1)
				var line = new Line(c0.getCenterX(), c0.getCenterY(), c1.getCenterX(), c1.getCenterY());
				line.setStroke(col);
				drawPaneRoutes.children.add(line)
				k++
			}
		}
	}
	

	def update() {
		Platform.runLater(new Runnable() {
			@Override
			def run() {
				drawPane.children.clear
				for (b : warehouses) {
					var img = new ImageView(new Image(PathEnum.WAREHOUSE.getPath, 20, 20, true, true))
					img.setX(b.position.x / 2 as int)
					img.setY(b.position.y / 2 as int)
					drawPane.children.add(img)
				}
				for (c : clients) {
					drawPane.children.add(c.drawItselfResults)
				}
			}
		})
	}
	
	def updateLists(map : SimulationMap) {
		this.simMap = map
		this.warehouses.clear
		this.clients.clear
		this.warehouses = map.warehouses
		for (cl : map.clients) {
			var client = new Client(cl, false)
			this.clients.add(client)
		}		
		update()
	}
	
	def getNbDronesInput() : String {
		return this.nbDronesTextField.text
	}

	def getNbEntrepotsInput() : String {
		return this.nbEntrepotsTextField.text
	}

	def getNbClientsInput() : String {
		return this.nbClientsTextField.text
	}

	def getPoidsColisInput() : String {
		return this.poidsColisTextField.text
	}

	def getSATempRange() : List<Float> {
		var temp = createRange(temperatureTextField.text)
		if (temp.size == 1) // if only one number, duplicate it
			temp.add(temp.get(0))
		return temp
	}

	def getSAAlphaRange() : List<Float> {
		var temp = createRange(alphaTextField1.text)
		if (temp.size == 1) // if only one number, duplicate it
			temp.add(temp.get(0))
		return temp
	}

	def getSAnbIterPalierRange() : List<Integer> {
		var temp = createRange(nbIterTextField.text)
		if (temp.size == 1) // if only one number, duplicate it
			temp.add(temp.get(0))
		var res : List<Integer> = new ArrayList<Integer>()
		for(e : temp)
			res.add(e.toInteger)
		return res
	}

	def getQLAlphaRange() : List<Float> {
		var temp = createRange(alphaQTextField.text)
		if (temp.size == 1) // if only one number, duplicate it
			temp.add(temp.get(0))
		return temp
	}

	def getQLGammaRange() : List<Float> {
		var temp = createRange(gammaTextField.text)
		if (temp.size == 1) // if only one number, duplicate it
			temp.add(temp.get(0))
		return temp
	}

	def getQLEpsilonRange() : List<Float> {
		var temp = createRange(epsilonTextField.text)
		if (temp.size == 1) // if only one number, duplicate it
			temp.add(temp.get(0))
		return temp
	}

}
