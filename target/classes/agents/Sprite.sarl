package agents

import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import io.sarl.core.ParticipantJoined
import io.sarl.core.ParticipantLeft
import io.sarl.core.SpaceCreated
import io.sarl.core.SpaceDestroyed
import javafx.scene.image.Image;
import javafx.scene.canvas.GraphicsContext;
import javafx.geometry.Rectangle2D;

/** 
 * @author arnaud
 * 
 */
agent Sprite {
	uses Logging

	var image : Image;

	var positionX : double;

	var positionY : double;

	var velocityX : double;

	var velocityY : double;

	var width : double;

	var height : double;

	on Initialize {
		positionX = 100;
		positionY = 100;
		velocityX = 10;
		velocityY = 10;
		// Event trigger before the agent begin to live or to be used.
		// You should put all the initialization statements in this block of code.
		info("The agent was started.")
	}
	
	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("The agent was stopped.")
	}

	def setImage(i : Image ): void
    {
        image = i;
        width = i.getWidth();
        height = i.getHeight();
    }

	def setImage(filename : String)	
    {
        var i = new Image (filename);
        setImage(i);
    }

	def setPosition(x : double, y : double) : void
    {
        positionX = x;
        positionY = y;
    }

	def setVelocity(x : double, y : double) : void
    {
        velocityX = x;
        velocityY = y;
    }

	def addVelocity(x : double, y : double) : void
    {
        velocityX += x;
        velocityY += y;
    }

	def update(time : double) : void
    {
        positionX += velocityX * time;
        positionY += velocityY * time;
    }

	def render(gc : GraphicsContext) : void 
    {
        gc.drawImage( image, positionX, positionY );
    }

	def getBoundary() : Rectangle2D 
    {
        return new Rectangle2D(positionX,positionY,width,height);
    }

	def intersects(s : Sprite) : boolean
    {
        return s.getBoundary().intersects( this.getBoundary() );
    }

	
	def displayAsString() : String 
    {
        return " Position: [" + positionX + "," + positionY + "]" 
        + " Velocity: [" + velocityX + "," + velocityY + "]";
    }

	on AgentSpawned {
		// A new agent has been spawned in our context.
	}

	on AgentKilled {
		// A new agent has been killed in our context.
	}

	on ContextJoined {
		// Event trigger when an agent of the level joins a shared context.
		// Sent to a agent of the same level.
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a agent of the same level.
	}

	on MemberJoined {
		// Event trigger when an agent joins one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on SpaceCreated {
		// Event trigger when a space is created into one of the contexts where the agent is.
	}

	on SpaceDestroyed {
		// Event trigger when a space is destroyed from one of the contexts where the agent is.
	}

	on ParticipantJoined {
		// Event trigger when a participant has joined a space.
	}

	on ParticipantLeft {
		// Event trigger when a participant has left a space.
	}
}
